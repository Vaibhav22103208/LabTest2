import numpy as np
import pandas as pd
from sklearn.datasets import load_breast_cancer
from sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import classification_report, confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt


data = load_breast_cancer()
df = pd.DataFrame(data.data, columns=data.feature_names)
df['target'] = data.target

print("First 10 rows of the dataset:")
print(df.head(10))

print("\nStatistics of the dataset will be:\n")
print(df.describe())

valuesMissing = df.isnull().sum()
print("No of Missing values will be:")
print(valuesMissing)

X = df.drop('target', axis=1)
y = df['target']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

correlation_matrix = pd.DataFrame(X_train_scaled, columns=data.feature_names).corr()
plt.figure(figsize=(12, 10))
sns.heatmap(correlation_matrix, annot=False, cmap='Blues')
plt.title("Correlation Matrix")
plt.show()

knn = KNeighborsClassifier()

param_grid = {'n_neighbors': range(1, 31)}
grid_search = GridSearchCV(knn, param_grid, cv=5)
grid_search.fit(X_train_scaled, y_train)

bestK = grid_search.best_params_['n_neighbors']
print(f"\nBest k value will be: {bestK}")

knn_best = KNeighborsClassifier(n_neighbors=bestK)
knn_best.fit(X_train_scaled, y_train)
y_pred = knn_best.predict(X_test_scaled)

print("\n Confusion Matrix will be:")
print(confusion_matrix(y_test, y_pred))

print("\n Classification Report will be:")
print(classification_report(y_test, y_pred))


